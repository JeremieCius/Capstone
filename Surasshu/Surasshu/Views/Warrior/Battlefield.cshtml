@using System.Security.Cryptography.X509Certificates
@using System.Security.Claims
@using System.Threading.Tasks;
@using System.Diagnostics
@model IEnumerable<Warrior>

<body class="battlefield">
<div class="container bg-black text-white">
    @{
        Warrior w1 = new Warrior();
        Warrior w2 = new Warrior();
        int w1MaxHp;
        int w2MaxHp;


        <div class="row">
            <div class="col">
                @foreach (var warrior in Model)
                {
                    if (warrior.UserId == User.FindFirstValue(ClaimTypes.NameIdentifier))
                    {
                        w1 = warrior;
                        w1MaxHp = warrior.Hp;
                        <img src="@w1.ImageLink" width="200" height="148"/>
                        <div>@w1.WarriorName</div>
                        <div>@w1.Hp / @w1MaxHp</div>
                    }
                    else
                    {
                        w2 = warrior;
                        w2MaxHp = warrior.Hp;
                        <img src="@w2.ImageLink" width="200" height="148"/>
                        <div>@w2.WarriorName</div>
                        <div>@w2.Hp / @w2MaxHp</div>
                    }
                }
            </div>
        </div>

        @functions {

            public async void SimulateSetAndBattle(Warrior pos1, Warrior pos2)
            {
                var random = new Random();

                var battle = new List<Warrior>();
                battle.Add(pos1);
                battle.Add(pos2);
                int attackRoll;
                int damageRoll;

                int count = 0;
                int count2 = 1;

                do
                {
                    var attacker = battle[count % 2];
                    var defender = battle[count2 % 2];
                    if (attacker.Hp >= 0)
                    {
                        attackRoll = random.Next(20) + 1 + battle[count % 2].AttackMod;
                        if (attackRoll >= battle[count2 % 2].Defense)
                        {
                            if (attackRoll == 20 + battle[count % 2].AttackMod)
                            {
                                //code for delaying message
                                damageRoll = random.Next(attacker.DieSide) * attacker.Crit + attacker.AttackMod;
                                defender.Hp -= damageRoll;
                                await DisplayBattle(attacker, defender, damageRoll);
                            }
                            else
                            {
                                //code for delaying message
                                damageRoll = damageRoll = random.Next(attacker.DieSide) * attacker.AttackMod;
                                defender.Hp -= damageRoll;
                                await DisplayBattle(attacker, defender, damageRoll);
                            }
                            }
                        }

                        count++;
                        count2++;
                    } while (battle[0].Hp > 0 && battle[1].Hp > 0);
                    if (battle[0].Hp <= 0)
                    {
                        //code for delaying message
                        <div>@DeclareWinner(battle[1], battle[0])</div>
                    }
                    if (battle[1].Hp <= 0)
                    {
                        //code for delaying message
                        <div>@DeclareWinner(battle[0], battle[1])</div>
                    }
                }

            public async Task DisplayBattle(Warrior war1, Warrior war2, int dmg)
            {
                var result = war1.WarriorName + " attacked " + war2.WarriorName + " and dealt " + dmg + " damage. " + war2.WarriorName + " has " + war2.Hp + " left.";
                <div>@result</div>
                await Task.Delay(3500);
            }

            //Create a function for printing the winner
            public string DeclareWinner(Warrior winner, Warrior loser)
            {
                var result = loser.WarriorName + " has been slain! " + winner.WarriorName + " wins!";
                return result;
            }


        }
        
        <div class="row bg-text">
            <div class="col">
                @{
                    SimulateSetAndBattle(w1,w2);
                }
            </div>
        </div>
    }
</div>

</body>