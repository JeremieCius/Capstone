@using System.Security.Cryptography.X509Certificates
@using System.Security.Claims
@using System.Threading.Tasks;
@using System.Diagnostics

@model IEnumerable<Warrior>

<body class="battlefield">
    @{
        <div class="container text-white">
         @{   
            Warrior w1 = new Warrior();
            Warrior w2 = new Warrior();


            <div class="row">
                <div class="col">
                    @foreach (var warrior in Model)
                    {
                        if (warrior.UserId == User.FindFirstValue(ClaimTypes.NameIdentifier))
                        {
                            w1 = warrior;

                        }
                        else
                        {
                            w2 = warrior;
                        }
                    }
                </div>
            </div>

            @functions {

                async public void SimulateSetAndBattle(Warrior pos1, Warrior pos2)
            {
                var random = new Random();

                var battle = new List<Warrior>();
                battle.Add(pos1);
                battle.Add(pos2);
                int attackRoll;
                int damageRoll;

                var progress = "";

                int count = 0;
                int count2 = 1;


                do
                {
                    var attacker = battle[count % 2];
                    var defender = battle[count2 % 2];
                    if (attacker.Hp >= 0)
                    {
                        attackRoll = random.Next(20) + 1 + battle[count % 2].AttackMod;
                        if (attackRoll >= battle[count2 % 2].Defense)
                        {
                            if (attackRoll == 20 + battle[count % 2].AttackMod)
                            {
                                damageRoll = random.Next(attacker.DieSide) + 1 * attacker.Crit + attacker.AttackMod;
                                defender.Hp -= damageRoll;

                                progress = "Critical Hit! " + DisplayBattle(attacker, defender, damageRoll);
                                <div>@progress</div>
                            }
                            else
                            {
                                damageRoll = damageRoll = random.Next(attacker.DieSide) + 1 + attacker.AttackMod;
                                defender.Hp -= damageRoll;
                                
                                progress = DisplayBattle(attacker, defender, damageRoll);
                                <div>@progress</div>
                            }
                        }
                    }

                        count++;
                        count2++;
                    } while (battle[0].Hp > 0 && battle[1].Hp > 0);
                    if (battle[0].Hp <= 0)
                    {
                        <div>@DeclareWinner(battle[1], battle[0])</div>
                    }
                    if (battle[1].Hp <= 0)
                    {
                        <div>@DeclareWinner(battle[0], battle[1])</div>
                    }
                }
                

                public string DisplayBattle(Warrior war1, Warrior war2, int dmg)
                {
                    var result = war1.WarriorName + " attacked " + war2.WarriorName + " and dealt " + dmg + " damage. " + war2.WarriorName + " has " + war2.Hp + " left.";
                    return result;
                }

                //Create a function for printing the winner
                public string DeclareWinner(Warrior winner, Warrior loser)
                {
                    var result = loser.WarriorName + " has been slain! " + winner.WarriorName + " wins!";
                    return result;
                }


            }

            <div class="row bg-text">
                <div id="displayBattle" class="col">
                @{
                    SimulateSetAndBattle(w1, w2);
                }
                </div>
            </div>
            }
        </div>
    }
</body>