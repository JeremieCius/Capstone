@using Surasshu.Models
@using Surasshu.Interfaces
@inject IDataAccessLayer Dal

<div>@Progress</div>
<div>@Conclusion</div>

@code {

    Random _random = new Random();


    List<Warrior> _battle = new List<Warrior>();

    [Parameter] public string? Progress { get; set; } = string.Empty;
    [Parameter] public string? Conclusion { get; set; } = string.Empty;

    [Parameter] public Warrior Warrior1 { get; set; }
    [Parameter] public Warrior Warrior2 { get; set; }

    public int Count = 0;
    public int Count2 = 1; 
    public int AttackRoll { get; set; }
    public int DamageRoll { get; set; }

    protected override void OnInitialized()
    {
        SimulateSetAndBattle();
    }

    public async void SimulateSetAndBattle()
    {
    _battle.Add(Warrior1);
    _battle.Add(Warrior2);

    ActivateFromStartQuirk(_battle[0], 
        Dal.GetQuirkByInt(_battle[0].QuirkOneId), 
        Dal.GetQuirkByInt(_battle[0].QuirkTwoId),
        Dal.GetQuirkByInt(_battle[0].QuirkThreeId));

    ActivateFromStartQuirk(_battle[1], 
        Dal.GetQuirkByInt(_battle[1].QuirkOneId), 
        Dal.GetQuirkByInt(_battle[1].QuirkTwoId),
        Dal.GetQuirkByInt(_battle[1].QuirkThreeId));
    do
    {
            var attacker = _battle[Count % 2];
            var defender = _battle[Count2 % 2];
            var rollForDamage = 0;
            
            if (attacker.Hp >= 0)
            {
                AttackRoll = _random.Next(20) + 1 + _battle[Count % 2].AttackMod;
                if (AttackRoll >= defender.Defense)
                {
                    if (AttackRoll == 20 + attacker.AttackMod)
                    {
                        for (var i = 0; i < attacker.DieCount; i++)
                        {
                            rollForDamage += _random.Next(attacker.DieSide);
                        }
                        DamageRoll = (int) (rollForDamage + 1 * attacker.Crit + attacker.AttackMod);
                        defender.Hp -= DamageRoll;
                        Progress = "Critical Hit! " + DisplayBattle(attacker, defender, DamageRoll);
                        ActivateReactionaryQuirk(attacker, 
                            Dal.GetQuirkByInt(attacker.QuirkOneId),
                            Dal.GetQuirkByInt(attacker.QuirkTwoId),
                            Dal.GetQuirkByInt(attacker.QuirkThreeId),
                            defender, DamageRoll);
                        StateHasChanged();
                        await Task.Delay(7500);
                    }
                    else
                    {
                        for (var i = 0; i < attacker.DieCount; i++)
                        {
                            rollForDamage += _random.Next(attacker.DieSide);
                        }
                        DamageRoll = _random.Next(attacker.DieSide) + 1 + attacker.AttackMod;
                        defender.Hp -= DamageRoll;
                        Progress = DisplayBattle(attacker, defender, DamageRoll);
                        ActivateReactionaryQuirk(attacker, 
                            Dal.GetQuirkByInt(attacker.QuirkOneId),
                            Dal.GetQuirkByInt(attacker.QuirkTwoId),
                            Dal.GetQuirkByInt(attacker.QuirkThreeId),
                            defender, DamageRoll);
                        StateHasChanged();
                        await Task.Delay(7300);
                    }
                }
            }

            Count++;
            Count2++;
        } while (_battle[0].Hp > 0 && _battle[1].Hp > 0);
        if (_battle[0].Hp <= 0)
        {
            Conclusion = DeclareWinner(_battle[1], _battle[0]);
            StateHasChanged();
        }
        else if (_battle[1].Hp <= 0)
        {
            Conclusion = DeclareWinner(_battle[0], _battle[1]);
            StateHasChanged();
        }
    }


    public string DisplayBattle(Warrior war1, Warrior war2, int dmg)
    {
        var result = war1.WarriorName + " attacked " + war2.WarriorName + " and dealt " + dmg + " damage. " + war2.WarriorName + " has " + war2.Hp + " left.";
        return result;
    }

    //Create a function for printing the winner
    public string DeclareWinner(Warrior winner, Warrior loser)
    {
        Dal.GiveWarriorXp(winner, loser);
        var result = loser.WarriorName + " has been slain! " + winner.WarriorName + " wins!";
        return result;
    }

    public void ActivateFromStartQuirk(Warrior wielder, Quirk q1, Quirk q2, Quirk q3)
    {
        var quirks = new List<Quirk>();
        quirks.Add(q1);
        quirks.Add(q2);
        quirks.Add(q3);
        
        foreach (var quirk in quirks)
        {
            switch (quirk.QuirkName)
            {
                case "Assassin":
                    ActivateAssassin(wielder);
                    break;
                case "Master Assassin":
                    ActivateMasterAssassin(wielder);
                    break;
                case "Toughness" :
                    ActivateToughness(wielder);
                    return;
            }
        }
        
    }

    public void ActivateAssassin(Warrior wielder)
    {
        wielder.Crit += 0.5;
    }

    public void ActivateMasterAssassin(Warrior wielder)
    {
        wielder.Crit += 1;
    }

    public void ActivateToughness(Warrior wielder)
    {
        wielder.Defense += 1;
        wielder.AttackMod += 1;
    }

    public void ActivateReactionaryQuirk(Warrior wielder, Quirk q1, Quirk q2, Quirk q3, Warrior target, int damage)
    {
        var quirks = new List<Quirk>();
        quirks.Add(q1);
        quirks.Add(q2);
        quirks.Add(q3);

        foreach (var quirk in quirks)
        {
            switch (quirk.QuirkName)
            {
                case "Nimble":
                    ActivateNimble(wielder, damage);
                    break;
                case "Frenzy":
                    ActivateFrenzy(wielder, target);
                    break;
                case "Finesse":
                    ActivateFinesse(wielder, damage);
                    break;
                case "Crit-Quencher":
                    ActivateCritQuencher(wielder, damage);
                    break;
                case "Uncanny Dodge":
                    ActivateUncannyDodge(wielder, damage);
                    break;
                case "Fury":
                    ActivateFury(wielder, target);
                    break;
                case "Parry":
                    ActivateParry(wielder, damage);
                    break;
                case "Punish":
                    ActivatePunish(wielder, target);
                    break;
                case "Deflect":
                    ActivateDeflect(wielder, target, damage);
                    break;
                case "Execution":
                    ActivateExecution(wielder, target);
                    break;
                case "Unkillable":
                    ActivateUnkillable(wielder);
                    return;
            }
        }
        
    }

    public void ActivateNimble(Warrior wielder, int damage)
    {
        var nimble = _random.Next(20) + 1;
        if (nimble >= 16)
        {
            wielder.Hp += damage / 2;
            Progress += wielder.WarriorName + " avoids the attack and takes only half of the damage dealt!";
            StateHasChanged();
        }
    }

    public async void ActivateFrenzy(Warrior wielder, Warrior target)
    {
        var frenzy = _random.Next(wielder.DieSide) + 3;
        if (AttackRoll >= target.Defense)
        {
            if (AttackRoll == 20 + wielder.AttackMod)
            {
                var damage = (int)(frenzy * wielder.Crit + wielder.AttackMod);
                target.Hp -= damage;

                Progress += wielder.WarriorName + " enters into a frenzy and deals an extra " + damage + " damage!" +
                            target.WarriorName + " only has " + target.Hp + " left.";
                StateHasChanged();                
                await Task.Delay(2000);

            }
            else
            {
                var damage = frenzy + wielder.AttackMod;
                target.Hp -= damage;

                Progress += wielder.WarriorName + " enters into a frenzy and deals an extra " + damage + " damage!" +
                            target.WarriorName + " only has " + target.Hp + " left.";
                StateHasChanged();
                await Task.Delay(2000);

            }
        }
    }

    public void ActivateFinesse(Warrior wielder, int damage)
    {
        var finesse = _random.Next(20) + 1;

        if (finesse == 20)
        {
            wielder.Hp += damage;
            Progress += wielder.WarriorName + " flats out dodge the attack and takes none of the damage dealt!"; 
            StateHasChanged();
        } else if (finesse is >= 16 and <= 19)
        {
            wielder.Hp += damage / 2;
            Progress += wielder.WarriorName + " avoids the attack and takes only half of the damage dealt!";
            StateHasChanged();
        }
    }

    public void ActivateCritQuencher(Warrior wielder, int damage)
    {
        if (AttackRoll == 20 + wielder.AttackMod)
        {
            wielder.Hp += (int)(damage / 2);
        }
    }

    public void ActivateUncannyDodge(Warrior wielder, int damage)
    {
        var dodge = _random.Next(20) + 1;

        if (dodge >= 19)
        {
            wielder.Hp += damage;
            Progress += wielder.WarriorName + " flats out dodge the attack and takes none of the damage dealt!"; 
            StateHasChanged();
        } else if (dodge is >= 11 and <= 18)
        {
            wielder.Hp += damage / 2;
            Progress += wielder.WarriorName + " avoids the attack and takes only half of the damage dealt!";
            StateHasChanged();
        }
    }

    public async void ActivateFury(Warrior wielder, Warrior target)
    {
        var fury = _random.Next(wielder.DieSide) + _random.Next(wielder.DieSide) + 3;
        if (AttackRoll >= target.Defense)
        {
            if (AttackRoll == 20 + wielder.AttackMod)
            {
                var damage = (int)(fury * wielder.Crit + wielder.AttackMod);
                target.Hp -= damage;

                Progress += wielder.WarriorName + " enters into a FURY and deals an extra " + damage + " damage!" +
                            target.WarriorName + " only has " + target.Hp + " left.";
                StateHasChanged();
                await Task.Delay(2500);

            }
            else
            {
                var damage = fury + wielder.AttackMod;
                target.Hp -= damage;

                Progress += wielder.WarriorName + " enters into a FURY and deals an extra " + damage + " damage!" +
                target.WarriorName + " only has " + target.Hp + " left.";
                StateHasChanged();
                await Task.Delay(2500);

            }
        }
    }

    public void ActivateParry(Warrior wielder, int damage)
    {
        var parry = _random.Next(20) + 1;

        if (parry >= 6)
        {
            var half = (int)(damage / 2);
            wielder.Hp += half;

            Progress += wielder.WarriorName + " deflects the attack and only takes " + half + " damage.";
            StateHasChanged();
        }
    }

    public async void ActivatePunish(Warrior wielder, Warrior target)
    {
        var punish = _random.Next(20) + 1;

        if (punish >= 18)
        {
            var damage = (int)(wielder.AttackMod * wielder.Crit);
            target.Hp -= damage;

            Progress += wielder.WarriorName + " finds the attack punishable " + " and deals " + damage + " damage!" +
                        target.WarriorName + " only has " + target.Hp + " left.";
            StateHasChanged();
            await Task.Delay(2500);

        }
    }

    public async void ActivateDeflect(Warrior wielder, Warrior target, int damage)
    {
        var parry = _random.Next(20) + 1;

        if (parry >= 6)
        {
            var deflect = (int)(damage / 4);
            var half = (int)(damage / 2);
            target.Hp -= deflect;

            Progress += wielder.WarriorName + " deflects the attack and only takes " + half + " damage. "
                + target.WarriorName + " takes " + deflect + "damage! " + target.WarriorName + " only has "
            + target.Hp + " left.";
            StateHasChanged();
            await Task.Delay(2500);

        }
    }

    public async void ActivateExecution(Warrior wielder, Warrior target)
    {
        var punish = _random.Next(20) + 1;
        var execution = _random.Next(20) + 1;

        if (punish >= 18 && execution >= 17)
        {
            var damage = (int)(wielder.AttackMod * wielder.Crit);
            target.Hp -= damage;

            Progress += wielder.WarriorName + " finds the attack punishable by EXECUTION " + " and deals " + damage + " damage!" + 
                        target.WarriorName + " only has " + target.Hp + " left.";
            StateHasChanged();
            await Task.Delay(2500);

        } else if (punish >= 18)
        {
            var damage = (int)(wielder.AttackMod * wielder.Crit);
            target.Hp -= damage;

            Progress += wielder.WarriorName + " finds the attack punishable " + " and deals " + damage + " damage!" +
                        target.WarriorName + " only has " + target.Hp + " left.";
            StateHasChanged();
            await Task.Delay(2500);

        }
    }

    public async void ActivateUnkillable(Warrior wielder)
    {
        if (wielder.Hp > 10)
        {
            var recovery = _random.Next(30,50) + 1;
            wielder.Hp += recovery;
            Progress += wielder.WarriorName + " activates 'Unkillable' and has recovered " + recovery  + " HP!";
            StateHasChanged();
            await Task.Delay(2500);

        }
    }


}

